name: Mirror image after commit

on:
  push:
    branches: ["master"]
  workflow_dispatch:

env:
  SOURCE_REPO: louislam/uptime-kuma
  TARGET_REPO: ghcr.io/yabloky/uptime-kuma

jobs:
  mirror:
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: Install jq
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq gh

      - name: Get last 2 stable versions
        id: versions
        run: |
          VERSIONS=$(curl -s https://api.github.com/repos/${SOURCE_REPO}/releases \
            | jq -r '[ .[] 
                | select(.tag_name 
                  | test("^[vV]?[0-9]+(\\.[0-9]+)*$")) ][0:2] 
                | .[].tag_name' \
            | sed 's/^v//')
          echo "versions<<EOF" >> $GITHUB_OUTPUT
          echo "$VERSIONS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "Found stable versions:"
          echo "$VERSIONS"

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Mirror last 2 versions
        run: |
          TARGET="${{ env.TARGET_REPO }}"
          SOURCE="${{ env.SOURCE_REPO }}"

          # список локальных тегов (фильтруем null/пустые)
          LOCAL_VERSIONS=$(gh api -H "Accept: application/vnd.github+json" /users/${{ github.actor }}/packages/container/uptime-kuma/versions \
            | jq -r '.[].metadata.container.tags[0]' | grep -v -E '^$|null' | sort -Vr || true)
          echo "Local versions:"
          echo "$LOCAL_VERSIONS"

          # тянем и пушим только новые
          while read -r VERSION; do
            [ -z "$VERSION" ] && continue
            if echo "$LOCAL_VERSIONS" | grep -q "^$VERSION$"; then
              echo "Already have $VERSION, skipping pull/push"
              continue
            fi
            echo "-----> New version detected: $VERSION"
            docker pull "${SOURCE}:$VERSION"
            docker tag  "${SOURCE}:$VERSION" "${TARGET}:$VERSION"
            docker push "${TARGET}:$VERSION"
          done <<< "${{ steps.versions.outputs.versions }}"

          # пересчитываем локальные теги
          LOCAL_VERSIONS=$(gh api -H "Accept: application/vnd.github+json" /users/${{ github.actor }}/packages/container/uptime-kuma/versions \
            | jq -r '.[].metadata.container.tags[0]' | grep -v -E '^$|null' | sort -Vr || true)
          COUNT=$(echo "$LOCAL_VERSIONS" | wc -l)
          if [ "$COUNT" -gt 2 ]; then
            OLDEST=$(echo "$LOCAL_VERSIONS" | tail -n +3)
            for OLD in $OLDEST; do
              echo "Deleting old version: $OLD"
              ID=$(gh api -H "Accept: application/vnd.github+json" /users/${{ github.actor }}/packages/container/uptime-kuma/versions \
                | jq -r ".[] | select(.metadata.container.tags[0]==\"$OLD\") | .id")
              gh api --method DELETE -H "Accept: application/vnd.github+json" /users/${{ github.actor }}/packages/container/uptime-kuma/versions/$ID
            done
          fi

          # обновляем latest
          LATEST=$(echo "${{ steps.versions.outputs.versions }}" | head -n 1)
          if ! docker image inspect "${TARGET}:$LATEST" >/dev/null 2>&1; then
            echo "TARGET:$LATEST not local, pulling from registry"
            docker pull "${TARGET}:$LATEST" || docker pull "${SOURCE}:$LATEST"
            docker tag "${SOURCE}:$LATEST" "${TARGET}:$LATEST" 2>/dev/null || true
          fi
          docker tag "${TARGET}:$LATEST" "${TARGET}:latest"
          docker push "${TARGET}:latest"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
